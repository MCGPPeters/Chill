using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Description;
using Chill.ExampleApplication.Dal;

namespace Chill.ExampleApplication.Controllers
{
    /// <summary>
    /// This is a controller generated by Visual studio to generate. 
    /// 
    /// This controller is primarily used to demonstrate how you could integration test a controller that uses a database.
    /// It's definetly not a recommendation on how to build applications, nor how to build webapi controllers. 
    /// </summary>
    public class StudentsController : ApiController
    {
        private readonly StudentContext db;

        public StudentsController(StudentContext db)
        {
            this.db = db;
        }

        // GET: api/Students
        public IQueryable<StudentEntity> GetStudents()
        {
            return db.Students;
        }

        // GET: api/Students/5
        [ResponseType(typeof(StudentEntity))]
        public async Task<IHttpActionResult> GetStudentEntity(Guid id)
        {
            StudentEntity studentEntity = await db.Students.FindAsync(id);
            if (studentEntity == null)
            {
                return NotFound();
            }

            return Ok(studentEntity);
        }

        // PUT: api/Students/5
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> PutStudentEntity(Guid id, StudentEntity studentEntity)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != studentEntity.Id)
            {
                return BadRequest();
            }

            db.Entry(studentEntity).State = EntityState.Modified;

            try
            {
                await db.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!StudentEntityExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return StatusCode(HttpStatusCode.NoContent);
        }

        // POST: api/Students
        [ResponseType(typeof(StudentEntity))]
        public async Task<IHttpActionResult> PostStudentEntity(StudentEntity studentEntity)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            db.Students.Add(studentEntity);

            try
            {
                await db.SaveChangesAsync();
            }
            catch (DbUpdateException)
            {
                if (StudentEntityExists(studentEntity.Id))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return CreatedAtRoute("DefaultApi", new { id = studentEntity.Id }, studentEntity);
        }

        // DELETE: api/Students/5
        [ResponseType(typeof(StudentEntity))]
        public async Task<IHttpActionResult> DeleteStudentEntity(Guid id)
        {
            StudentEntity studentEntity = await db.Students.FindAsync(id);
            if (studentEntity == null)
            {
                return NotFound();
            }

            db.Students.Remove(studentEntity);
            await db.SaveChangesAsync();

            return Ok(studentEntity);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool StudentEntityExists(Guid id)
        {
            return db.Students.Count(e => e.Id == id) > 0;
        }
    }
}